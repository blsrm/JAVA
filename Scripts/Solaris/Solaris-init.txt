tw_locale=`locale -a | grep -i en_us | grep -i "utf.*8" | head -n 1 2>/dev/null`

LANGUAGE=""
if [ "$tw_locale" != "" ]; then
    LANG=$tw_locale
    LC_ALL=$tw_locale
else
    LANG=C
    LC_ALL=C
fi
export LANG LC_ALL


# Stop alias commands changing behaviour.
unalias -a

# Insulate against systems with -u set by default.
set +u

if [ -w /tmp ] 
then
    # use a /tmp file to capture stderr
    TW_CAPTURE_FILE=/tmp/tideway_status_$$
    export TW_CAPTURE_FILE
    rm -f $TW_CAPTURE_FILE

    tw_capture(){
        TW_NAME=$1
        shift
        echo begin cmd_status_err_$TW_NAME >>$TW_CAPTURE_FILE
        "$@" 2>>$TW_CAPTURE_FILE
        RETURN_VAL=$?
        echo end cmd_status_err_$TW_NAME >>$TW_CAPTURE_FILE

        echo cmd_status_$TW_NAME=$RETURN_VAL >>$TW_CAPTURE_FILE
        return $RETURN_VAL
    }

    tw_report(){
        if [ -f $TW_CAPTURE_FILE ]
        then 
            cat $TW_CAPTURE_FILE 2>/dev/null
            rm -f $TW_CAPTURE_FILE 2>/dev/null
        fi
    }
else
    # can't write to /tmp - do not capture anything
    tw_capture(){
        shift
        "$@" 2>/dev/null
    }

    tw_report(){
        echo "cmd_status_err_status_unavailable=Unable to write to /tmp"
    }
fi 

# replace the following PRIV_XXX functions with one that has the path to a
# program to run the commands as super user, e.g. sudo. For example
# PRIV_LSOF() {
#   /usr/bin/sudo "$@"
# }

# lsof requires superuser privileges to display information on processes
# other than those running as the current user
PRIV_LSOF() {
 sudo "$@"
}

# This function supports running privileged commands from patterns
PRIV_RUNCMD() {
 sudo "$@"
}

# This function supports privileged cat of files.
# Used in patterns and to get file content.
PRIV_CAT() {
 cat "$@"
}

# This function supports privilege testing of attributes of files.
# Used in conjunction with PRIV_CAT and PRIV_LS
PRIV_TEST() {
  test "$@"
}

# This function supports privilege listing of files and directories
# Used in conjunction with PRIV_TEST 
PRIV_LS() {
  ls "$@"
}

# This function supports privilege listing of file systems and related
# size and usage.
PRIV_DF() {
  "$@"
}

tw_which() {
  SAVE=$IFS
  IFS=:
  for d in $PATH
  do
    if [ -x $d/$1 -a ! -d $d/$1 ]
    then
        echo $d/$1
        break
    fi
  done
  IFS=$SAVE
}

# dmidecode requires superuser privileges to read data from the system BIOS
# on Solaris X86 platforms only
PRIV_DMIDECODE() {
    "$@"
}

# ifconfig requires superuser privileges to display the MAC address of each
# interface
PRIV_IFCONFIG() {
    "$@"
}

# dladm requires superuser privileges to display speed, duplex settings, and
# port aggregation information
PRIV_DLADM() {
    "$@"
}

# ndd requires superuser privileges to display any interface speed
# and negotiation settings
PRIV_NDD() {
    "$@"
}

# By default, the standard ps command on Solaris will truncate command lines
# to 80 characters. This affects Solaris 11, Solaris 10 and Solaris 8 & 9
# with certain patches.
#
# In order to display unlimited command lines, there are several options:
#
#   pargs - This tool is available in more recent updates of Solaris 9 and
#           all updates of Solaris 10 and later. This tool requires the
#           proc_owner privilege to display unlimited command lines for all
#           processes.
#
#   /usr/bin/ps - On Solaris 11, the standard ps command can display
#           unlimited command lines by using BSD style command line arguments.
#           This still requires the the tool is run with proc_owner privilege
#
#  /usr/ucb/ps - This tool is part of the UCB compatibility package which is
#           usually installed by default on versions up to and including
#           Solaris 10 (SUNWscpu package). This tool requires the
#           proc_owner privilege to display unlimited command lines for all
#           processes.
#
#           On Solaris 11, the compatibility/ucb is not usually installed
#           by default and in any case, the /usr/ucb/ps command is simply
#           a link to /usr/bin/ps
#
# In order for the Discovery Condition pattern to correctly detect whether
# ps is being executed with proc_owner privilege, this function must accept
# both the ps command and the ppriv command used by pattern.
PRIV_PS() {
    "$@"
}

# See comments above PRIV_PS, above
PRIV_PARGS() {
    "$@"
}

# lputil requires superuser privileges to display any HBA information
PRIV_LPUTIL() {
    "$@"
}

# hbacmd requires superuser privileges to display any HBA information
PRIV_HBACMD() {
    "$@"
}

# emlxadm requires superuser privileges to display any HBA information
PRIV_EMLXADM() {
    "$@"
}

# fcinfo requires superuser privileges to display any HBA information
PRIV_FCINFO() {
    "$@"
}

# pfiles requires superuser privileges to display open port information
# for processes not running as the current user
PRIV_PFILES() {
    "$@"
}